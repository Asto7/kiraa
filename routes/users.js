const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const passport = require('passport');
var GOD;
const {check,validationResult}=require('express-validator');
var passwordValidator = require('password-validator');


// const captchagen=require('captchagen')

var pass = new passwordValidator()


pass.has().uppercase()                              // Must have uppercase letters
.has().lowercase()                              // Must have lowercase letters
.has().digits()                                 // Must have digits
.has().not().spaces()                           // Should not have spaces
.is().not().oneOf(['Passw0rd', 'Password123']); 




// load user model
require('../models/User');
const User = mongoose.model('users');

//dynamic UserName
router.get('/kira',(req,res)=>{
  if(req.query.a.length<4)
  res.send('*Too short');
  else if(req.query.a.length==0)
  res.send('min');

else {  User.findOne({username:req.query.a}).then(result=>{
if(result)
{  res.send('*Already Exists');
}
else res.send('*Availble');
  })
}
})


// //Captcha
// router.get('/captcha', (req,res) => {
//   var captcha = captchagen.create();

//   var x=captcha.text();     // Returns captcha text (randomly generated by default)
//   captcha.height();   // Returns captcha height (150 by default)
//   captcha.width();    // Returns captcha width (300 by default)
//   captcha.generate(); // Draws the image to the canvas
// res.contentType='image/png';
//   res.write(x);
//   res.write(captcha.uri());
// res.end();
// });



// user login route
router.get('/login', (req,res) => {
  res.render('users/login');
});

// user login route
router.get('/register', (req,res) => {
  res.render('users/register');
});


// login form post
router.post('/login', (req,res,next) => {

  passport.authenticate('local', {
    successRedirect: '/FM',
    failureRedirect: '/users/login',
    failureFlash: true
  })(req,res,next);
});



// register form post
router.post('/register',[check('name').isLength({ min: 3 }), check('email').isEmail()], (req,res) => {
  let errors = [];
  
  let x=validationResult(req).array();

  for(let j=0;j<x.length;j++)
  {
    if(x[j].param=='name')
    errors.push({text: "Name should be of atleast 3 character!"});

    else if(x[j].param=='email')
    errors.push({text: "Invalid Email!"});

  }
 
  // if(req.body.captcha!=req.body.captchaV)
  //   errors.push({text: "Captcha Did'nt Match"});


  if (req.body.password != req.body.password2) {
    errors.push({text: 'Passwords do not match!'});
  }
 
 if(!pass.validate(req.body.password))
 errors.push({text: 'Passwords should has atleast one Uppercase, lowercase & digit !'});
  


  if (req.body.ki=='red') {
    errors.push({text: 'Try Another Username which are Availble.'});
  }

  if (errors.length > 0) {
    res.render('users/register', {
      errors: errors,
      name: req.body.name,
      username:req.body.username,
      email: req.body.email,
      password: req.body.password,
      password2: req.body.password2
    })
  } else {
    User.findOne({
      email: req.body.email
    }).then((user) => {
      if (user) {
        req.flash('error_msg', 'A user with the same email already exists');
        res.redirect('/users/register');
      } else {
        const newUser = new User({
          name: req.body.name,
          username:req.body.username,
          email: req.body.email,
          password: req.body.password,
        });
        bcrypt.genSalt(10, (err, salt) => {
          bcrypt.hash(newUser.password, salt, (err, hash) => {
            if (err) throw err;
            newUser.password = hash;
            newUser.save().then((user) => {
              req.flash('success_msg', 'You are now registered and can login');
              res.redirect('/users/login');
            }).catch(err => {
              console.log(err);
              return;
            });
          });
        });
      }
    });
  }
})

router.get('/logout', (req,res) => {
  req.logout();
  req.flash('success_msg', 'You are logged out');
  res.redirect('/users/login');
});

module.exports = {
  a:router,
b:GOD
}
